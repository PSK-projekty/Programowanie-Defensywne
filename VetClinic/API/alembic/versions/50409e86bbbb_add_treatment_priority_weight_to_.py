"""Add treatment, priority, weight to appointments

Revision ID: 50409e86bbbb
Revises: 4f6425d2748c
Create Date: 2025-05-05 19:46:41.765095

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision: str = '50409e86bbbb'
down_revision: Union[str, None] = '4f6425d2748c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    insp = inspect(conn)
    existing = {c["name"] for c in insp.get_columns("appointments")}

    # 1) Add treatment if missing
    if "treatment" not in existing:
        op.add_column(
            "appointments",
            sa.Column(
                "treatment",
                sa.Text(),
                nullable=True,
                comment="Zastosowane leczenie podczas wizyty",
            ),
        )

    # 2) Add priority if missing (with temporary server_default so SQLite can backfill)
    if "priority" not in existing:
        op.add_column(
            "appointments",
            sa.Column(
                "priority",
                sa.String(),
                nullable=False,
                server_default="normalna",
                comment="Priorytet wizyty: normalna,pilna,nagła",
            ),
        )
        # remove the default so future INSERTs require an explicit value
        op.alter_column("appointments", "priority", server_default=None)

    # 3) Add weight if missing
    if "weight" not in existing:
        op.add_column(
            "appointments",
            sa.Column(
                "weight",
                sa.Float(),
                nullable=True,
                comment="Waga zwierzęcia podczas wizyty",
            ),
        )

    # 4) Drop old status column only if it’s still there
    if "status" in existing:
        op.drop_column("appointments", "status")

    # 5) Fix the foreign key on medical_records
    #    Drop the old FK (unnamed) and recreate it pointing to animals.id with ON DELETE CASCADE
    op.drop_constraint(None, "medical_records", type_="foreignkey")
    op.create_foreign_key(
        None,
        "medical_records",
        "animals",
        ["animal_id"],
        ["id"],
        ondelete="CASCADE",
    )



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'medical_records', type_='foreignkey')
    op.create_foreign_key(None, 'medical_records', 'animals', ['animal_id'], ['id'])
    op.add_column('appointments', sa.Column('status', sa.VARCHAR(), nullable=False))
    op.drop_column('appointments', 'weight')
    op.drop_column('appointments', 'priority')
    op.drop_column('appointments', 'treatment')
    # ### end Alembic commands ###
